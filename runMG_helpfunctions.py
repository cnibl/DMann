import sys


def write_MGscript(mX,annPDG,run,MG_dir="/home/carlniblaeus/MG5_aMC_v2_6_3_2/",outfile="MGscript.txt"):
	if MG_dir[-1]=="/":
		fullpath=''.join((MG_dir,run))
	else:
		fullpath=''.join((MG_dir,"/",run))
	with open(outfile,'w') as f:
		f.write("import model sm-full\n")
		if annPDG==24:
			f.write("generate e+ e- > h > w+ w-, (w+ > all all), (w- > all all)\n")
			f.write("output "+run)
		else:
			sys.exit("try other annPDG\n")

	return outfile

def write_pythiacard(outfile="pythia8_card.dat",pythiaoutputfile="tag_1_pythia8_events.hepmc"):
	"""
	Write the pythia8_card.dat file that contains the Pythia parameters for the run.
	"""
	with open(outfile,'w') as f:	
		f.write("! ==================\n")
		f.write("! General parameters \n")
		f.write("! ==================\n")
		f.write("!\n")
		f.write("Main:numberOfEvents      = -1\n")
		f.write("!\n")
		f.write("! -------------------------------------------------------------------\n")
		f.write("! Specify the HEPMC output of the Pythia8 shower. You can set it to:\n")
		f.write("!   auto      : MG5aMC will automatically place it the run_<i> directory\n")
		f.write("!   /dev/null : to turn off the HEPMC output.\n")
		f.write("!   <path>    : to select where the HEPMC file must written. It will \n")
		f.write("!               therefore not be placed in the run_<i> directory. The\n")
		f.write("!               specified path, if not absolute, will be relative to \n")
		f.write("!               the Event/run_<i> directory of the process output.\n")
		f.write("!   fifo      : to have MG5aMC setup the piping of the PY8 output to \n")
		f.write("!               analysis tools such as MadAnalysis5.  \n")
		f.write("!   fifo@<fifo_path> :\n")
		f.write("!               Same as 'fifo', but selecting a custom path to create the\n")
		f.write("!               fifo pipe. (useful to select a mounted drive that supports \n")
		f.write("!               fifo). Note that the fifo file extension *must* be '.hepmc.fifo'.\n")
		f.write("! -------------------------------------------------------------------\n")
		f.write("!\n")
		f.write("HEPMCoutput:file         = "+pythiaoutputfile+"\n")
		f.write("!\n")
		f.write("! --------------------------------------------------------------------\n")
		f.write("! Parameters relevant only when performing MLM merging, which can be\n")
		f.write("! turned on by setting ickkw to '1' in the run_card and chosing a \n")
		f.write("! positive value for the parameter xqcut.\n")
		f.write("! For details, see section 'Jet Matching' on the left-hand menu of \n")
		f.write("!    http://home.thep.lu.se/~torbjorn/pythia81html/Welcome.html\n")
		f.write("! --------------------------------------------------------------------\n")
		f.write("! If equal to -1.0, MadGraph5_aMC@NLO will set it automatically based \n")
		f.write("! on the parameter 'xqcut' of the run_card.dat \n")
		f.write("! The following parameter was forced to be commented out by MG5aMC.\n")
		f.write("! JetMatching:qCut         = -1.0\n")
		f.write("! Use default kt-MLM to match parton level jets to those produced by the\n")
		f.write("! shower. But the other Shower-kt scheme is available too with this option.\n")
		f.write("! The following parameter was forced to be commented out by MG5aMC.\n")
		f.write("! JetMatching:doShowerKt   = off\n")
		f.write("! A value of -1 means that it is automatically guessed by MadGraph.\n")
		f.write("! It is however always safer to explicitly set it.\n")
		f.write("! The following parameter was forced to be commented out by MG5aMC.\n")
		f.write("! JetMatching:nJetMax      = -1\n")
		f.write("!\n")
		f.write("! --------------------------------------------------------------------\n")
		f.write("! Parameters relevant only when performing CKKW-L merging, which can\n")
		f.write("! be turned on by setting the parameter 'ptlund' *or* 'ktdurham' to\n")
		f.write("! a positive value. \n")
		f.write("! For details, see section 'CKKW-L Merging' on the left-hand menu of \n")
		f.write("!    http://home.thep.lu.se/~torbjorn/pythia81html/Welcome.html\n")
		f.write("! --------------------------------------------------------------------\n")
		f.write("! Central merging scale values you want to be used.\n")
		f.write("! If equal to -1.0, then MadGraph5_aMC@NLO will set this automatically\n")
		f.write("! based on the parameter 'ktdurham' of the run_card.dat\n")
		f.write("! The following parameter was forced to be commented out by MG5aMC.\n")
		f.write("! Merging:TMS              = -1.0\n")
		f.write("! This must be set manually, according to Pythia8 directives.\n")
		f.write("! An example of possible value is 'pp>LEPTONS,NEUTRINOS'\n")
		f.write("! Alternatively, from Pythia v8.223 onwards, the value 'guess' can be \n")
		f.write("! used to instruct Pythia to guess the hard process. The guess would mean \n")
		f.write("! that all particles apart from light partons will be considered as a part \n")
		f.write("! of the hard process. This guess is prone to errors if the desired hard \n")
		f.write("! process is complicated (i.e. contains light partons). The user should\n")
		f.write("! then be wary of suspicious error messages in the Pythia log file. \n")
		f.write("! The following parameter was forced to be commented out by MG5aMC.\n")
		f.write("! Merging:Process          = <set_by_user>\n")
		f.write("! A value of -1 means that it is automatically guessed by MadGraph.\n")
		f.write("! It is however always safer to explicitly set it.\n")
		f.write("! The following parameter was forced to be commented out by MG5aMC.\n")
		f.write("! Merging:nJetMax  		 = -1\n")
		f.write("!\n")
		f.write("! For all merging schemes, decide whehter you want the merging scale\n")
		f.write("! variation computed for only the central weights or all other \n")
		f.write("! PDF and scale variation weights as well\n")
		f.write("SysCalc:fullCutVariation = off\n")
		f.write("!\n")
		f.write("! ==========================\n")
		f.write("! User customized parameters \n")
		f.write("! ==========================\n")
		f.write("!\n")
		f.write("! By default, Pythia8 generates multi-parton interaction events. This is\n")
		f.write("! often irrelevant for phenomenology and very slow. You can turn this \n")
		f.write("! feature off by uncommenting the line below if so desired.\n")
		f.write("partonlevel:mpi = off\n")
		f.write("!\n")
		f.write("! Additional general parameters.\n")
		f.write("!\n")
		f.write("13:mayDecay=true                 \n")
		f.write("211:mayDecay=true                 \n")
		f.write("130:mayDecay=true                 \n")
		f.write("2112:mayDecay=true                 \n")
		f.write("321:mayDecay=true                 \n")
		f.write("!\n")
		f.write("! Additional technical parameters set by MG5_aMC.\n")
		f.write("!\n")
		f.write("! Tell Pythia8 that an LHEF input is used.\n")
		f.write("Beams:frameType=4\n")
		f.write("! Specify one must read inputs from the MadGraph banner.\n")
		f.write("JetMatching:setMad=off\n")
		f.write("JetMatching:etaJetMax=1.0000000000e+03\n")
		f.write("! 1.0 corresponds to HEPMC weight given in [mb]. We choose here the [pb] normalization.\n")
		f.write("HEPMCoutput:scaling=1.0000000000e+09\n")
		f.write("! Be more forgiving with momentum mismatches.\n")
		f.write("Check:epTolErr=1.0000000000e-02\n")
		f.write("! \n")
		f.write("!     ====================\n")
		f.write("!     Subrun definitions\n")
		f.write("!     ====================\n")
		f.write("!     \n")
		f.write("LHEFInputs:nSubruns=1\n")
		f.write("Main:subrun=0\n")
		f.write("!\n")
		f.write("!  Definition of subrun 0\n")
		f.write("!\n")
		f.write("Beams:LHEF=unweighted_events.lhe.gz\n")

		f.close()
	return outfile


def write_paramcard(mX,outfile="param_card.dat"):
	"""
	Write the param_card.dat file that contains the model parameters.
	"""
	with open(outfile,'w') as f:	
		f.write("#********************************************************************\n")
		f.write("#                       MadGraph5_aMC@NLO                           *\n")
		f.write("#********************************************************************\n")
		f.write("#           Les Houches friendly file for the SM parameters of      *\n")
		f.write("#   MadGraph5_aMC@NLO Spectrum and decay widths produced by SMCalc  *\n")
		f.write("#********************************************************************\n")
		f.write("# Please note the following IMPORTANT issues:                      *\n")
		f.write("#                                                                   *\n")
		f.write("# 0. REFRAIN from editing this file by hand! Some of the parame-    *\n")
		f.write("#    ters are not independent                                       *\n")
		f.write("#    (such as G_Fermi, alpha_em, sin(theta_W),MZ,MW) and serious    *\n")
		f.write("#    problems might be encountered (such as violation of unitarity  *\n")
		f.write("#    or gauge invariance).  Always use a calculator.                *\n")
		f.write("#                                                                   *\n")
		f.write("# 1. alpha_S(MZ) has been used in the calculation of the parameters *\n")
		f.write("#    but, for consistency, it will be reset by MadGraph5_aMC@NLO to *\n")
		f.write("#    the value expected IF the pdfs for collisions with hadrons are *\n")
		f.write("#    used. This value is KEPT by MadGraph5_aMC@NLO when no pdf are  *\n")
		f.write("#    usedlpp(i)=0 .                                                 *\n")
		f.write("#                                                                   *\n")
		f.write("# 2. Values of the charm and bottom kinematic (pole) masses are     *\n")
		f.write("#    those used in the matrix elements and phase space UNLESS they  *\n")
		f.write("#    are set to ZERO from the start in the model (particles.dat)    *\n")
		f.write("#    This happens, for example,  when using 5-flavor QCD where      *\n")
		f.write("#    charm and bottom are treated as partons in the initial state   *\n")
		f.write("#    and a zero mass might be hardwired in the model definition.    *\n")
		f.write("#                                                                   *\n")
		f.write("#********************************************************************\n")
		f.write("Block SMINPUTS      # Standard Model inputs\n")
		f.write("     1         1.32506980E+02   # alpha_em(MZ)(-1) SM MSbar\n")
		f.write("     2         1.16639000E-05   # G_Fermi\n")
		f.write("     3         1.18000000E-01   # alpha_s(MZ) SM MSbar\n")
		f.write("     4         9.11880000E+01   # Z mass (as input parameter)\n")
		f.write("Block MGYUKAWA     # Yukawa masses m/v=y/sqrt(2)\n")
		f.write("#    PDG          YMASS\n")
		f.write("     5         4.20000000E+00   # mbottom for the Yukawa  y_b\n")
		f.write("     4         1.42000000E+00   # mcharm  for the Yukawa  y_c\n")
		f.write("     6         1.64500000E+02   # mtop    for the Yukawa  y_t\n")
		f.write("    15         1.77700000E+00   # mtau    for the Yukawa  y_ta\n")
		f.write("Block MGCKM     # CKM elements for MadGraph5_aMC@NLO\n")
		f.write("     1   1     9.75000000E-01   # Vud for Cabibbo matrix\n")
		f.write("Block MASS      #  Mass spectrum (kinematic masses)\n")
		f.write("#       PDG       Mass\n")
		f.write("         5     4.70000000E+00   # bottom   pole mass\n")
		f.write("         6     1.74300000E+02   # top      pole mass\n")
		f.write("        15     1.77700000E+00   # tau      mass\n")
		f.write("        23     9.11880000E+01   # Z        mass\n")
		f.write("        24     8.04190000E+01   # W        mass\n")
		f.write("        25     "+str(2.*mX)+"   # H        mass\n")
		f.write("#            PDG       Width\n")
		f.write("DECAY         6     1.50833649E+00   # top width\n")
		f.write("DECAY        23     2.44140351E+00   # Z   width\n")
		f.write("DECAY        24     2.04759951E+00   # W   width\n")
		f.write("DECAY        25     5.75308848E-03   # H   width\n")
		f.write("#        BR           NDA        ID1       ID2\n")
		f.write("     8.27451012E-02    2           4        -4   # BR( H -> c  cbar  )\n")
		f.write("     7.17809696E-01    2           5        -5   # BR( H -> b  bbar  )\n")
		f.write("     0.00000000E+00    2           6        -6   # BR( H -> t  tbar  )\n")
		f.write("     4.31720144E-02    2          15       -15   # BR( H -> tau- tau+)\n")
		f.write("     6.90597075E-03    2          23        23   # BR( H -> Z   Z^(*))\n")
		f.write("     7.45906395E-02    2          24       -24   # BR( H -> W   W^(*))\n")
		f.write("     3.01765558E-02    2          21        21   # BR( H -> g   g    )\n")
		f.write("     1.42800773E-03    2          22        22   # BR( H -> A   A    )\n")		
		f.close()

	return outfile

def write_runcard(nAnn,mX,outfile="run_card.dat"):
	"""
	Write the run_card.dat file that contains the general parameters for the run.
	"""
	with open(outfile,'w') as f:	
		f.write("#*********************************************************************\n")
		f.write("#                       MadGraph5_aMC@NLO                            *\n")
		f.write("#                                                                    *\n")
		f.write("#                     run_card.dat MadEvent                          *\n")
		f.write("#                                                                    *\n")
		f.write("#  This file is used to set the parameters of the run.               *\n")
		f.write("#                                                                    *\n")
		f.write("#  Some notation/conventions:                                        *\n")
		f.write("#                                                                    *\n")
		f.write("#   Lines starting with a '# ' are info or comments                  *\n")
		f.write("#                                                                    *\n")
		f.write("#   mind the format:   value    = variable     ! comment             *\n")
		f.write("#                                                                    *\n")
		f.write("#   To display more options, you can type the command:               *\n")
		f.write("#      update full_run_card                                          *\n")
		f.write("#*********************************************************************\n")
		f.write("#\n")
		f.write("#*******************                                                 \n")
		f.write("# Running parameters\n")
		f.write("#*******************                                                 \n")
		f.write("#                                                                    \n")
		f.write("#*********************************************************************\n")
		f.write("# Tag name for the run (one word)                                    *\n")
		f.write("#*********************************************************************\n")
		f.write("  tag_1     = run_tag ! name of the run \n")
		f.write("#*********************************************************************\n")
		f.write("# Number of events and rnd seed                                      *\n")
		f.write("# Warning: Do not generate more than 1M events in a single run       *\n")
		f.write("# If you want to run Pythia, avoid more than 50k events in a run.    *\n")
		f.write("#*********************************************************************\n")
		f.write("  "+str(nAnn)+" = nevents ! Number of unweighted events requested \n")
		f.write("  0   = iseed   ! rnd seed (0=assigned automatically=default))\n")
		f.write("#*********************************************************************\n")
		f.write("# Collider type and energy                                           *\n")
		f.write("# lpp: 0=No PDF, 1=proton, -1=antiproton, 2=photon from proton,      *\n")
		f.write("#                                         3=photon from electron     *\n")
		f.write("#*********************************************************************\n")
		f.write("     0        = lpp1    ! beam 1 type \n")
		f.write("     0        = lpp2    ! beam 2 type\n")
		f.write("     "+str(mX)+"     = ebeam1  ! beam 1 total energy in GeV\n")
		f.write("     "+str(mX)+"     = ebeam2  ! beam 2 total energy in GeV\n")
		f.write("# To see polarised beam options: type \"update beam_pol\"\n")
		f.write("#*********************************************************************\n")
		f.write("# PDF CHOICE: this automatically fixes also alpha_s and its evol.    *\n")
		f.write("#*********************************************************************\n")
		f.write("     nn23lo1    = pdlabel     ! PDF set                                     \n")
		f.write("     230000    = lhaid     ! if pdlabel=lhapdf, this is the lhapdf number\n")
		f.write("# To see heavy ion options: type \"update ion_pdf\"\n")
		f.write("#*********************************************************************\n")
		f.write("# Renormalization and factorization scales                           *\n")
		f.write("#*********************************************************************\n")
		f.write(" False = fixed_ren_scale  ! if .true. use fixed ren scale\n")
		f.write(" False        = fixed_fac_scale  ! if .true. use fixed fac scale\n")
		f.write(" 200.00  = scale            ! fixed ren scale\n")
		f.write(" 200.00  = dsqrt_q2fact1    ! fixed fact scale for pdf1\n")
		f.write(" 200.00  = dsqrt_q2fact2    ! fixed fact scale for pdf2\n")
		f.write(" -1 = dynamical_scale_choice ! Choose one of the preselected dynamical choices\n")
		f.write(" 1.0  = scalefact        ! scale factor for event-by-event scales\n")
		f.write("#*********************************************************************\n")
		f.write("# Type and output format\n")
		f.write("#*********************************************************************\n")
		f.write("  False     = gridpack  !True = setting up the grid pack\n")
		f.write("  -1.0 = time_of_flight ! threshold (in mm) below which the invariant livetime is not written (-1 means not written)\n")
		f.write("  3.0 = lhe_version       ! Change the way clustering information pass to shower.        \n")
		f.write("  True = clusinfo         ! include clustering tag in output\n")
		f.write("  average =  event_norm       ! average/sum. Normalization of the weight in the LHEF\n")
		f.write("\n")
		f.write("#*********************************************************************\n")
		f.write("# Matching parameter (MLM only)\n")
		f.write("#*********************************************************************\n")
		f.write(" 0 = ickkw            ! 0 no matching, 1 MLM\n")
		f.write(" 1.0 = alpsfact         ! scale factor for QCD emission vx\n")
		f.write(" False = chcluster        ! cluster only according to channel diag\n")
		f.write(" 5 = asrwgtflavor     ! highest quark flavor for a_s reweight\n")
		f.write(" False  = auto_ptj_mjj  ! Automatic setting of ptj and mjj if xqcut >0\n")
		f.write("                                   ! (turn off for VBF and single top processes) \n")
		f.write(" 0.0   = xqcut   ! minimum kt jet measure between partons\n")
		f.write("#*********************************************************************\n")
		f.write("#\n")
		f.write("#*********************************************************************\n")
		f.write("# handling of the helicities:\n")
		f.write("#  0: sum over all helicities\n")
		f.write("#  1: importance sampling over helicities\n")
		f.write("#*********************************************************************\n")
		f.write("   0  = nhel          ! using helicities importance sampling or not.\n")
		f.write("#*********************************************************************\n")
		f.write("# Generation bias, check the wiki page below for more information:   *\n")
		f.write("#  'cp3.irmp.ucl.ac.be/projects/madgraph/wiki/LOEventGenerationBias' *\n")
		f.write("#*********************************************************************\n")
		f.write(" None = bias_module  ! Bias type of bias, [None, ptj_bias, -custom_folder-]\n")
		f.write(" {} = bias_parameters ! Specifies the parameters of the module.\n")
		f.write("#\n")
		f.write("#*******************************                                                 \n")
		f.write("# Parton level cuts definition *\n")
		f.write("#*******************************                                     \n")
		f.write("#                                                                    \n")
		f.write("#\n")
		f.write("#*********************************************************************\n")
		f.write("# BW cutoff (M+/-bwcutoff*Gamma) ! Define on/off-shell for  decay  \n")
		f.write("#*********************************************************************\n")
		f.write("  15.0  = bwcutoff      ! (M+/-bwcutoff*Gamma)\n")
		f.write("#*********************************************************************\n")
		f.write("# Apply pt/E/eta/dr/mij/kt_durham cuts on decay products or not\n")
		f.write("# (note that etmiss/ptll/ptheavy/ht/sorted cuts always apply)\n")
		f.write("#*********************************************************************\n")
		f.write("   False  = cut_decays    ! Cut decay products \n")
		f.write("#*********************************************************************\n")
		f.write("# Standard Cuts                                                      *\n")
		f.write("#*********************************************************************\n")
		f.write("# Minimum and maximum pt's (for max, -1 means no cut)                *\n")
		f.write("#*********************************************************************\n")
		f.write(" 20.0  = ptj       ! minimum pt for the jets \n")
		f.write(" 0.0  = ptb       ! minimum pt for the b \n")
		f.write(" 10.0  = pta       ! minimum pt for the photons \n")
		f.write(" 10.0  = ptl       ! minimum pt for the charged leptons \n")
		f.write(" 0.0  = misset    ! minimum missing Et (sum of neutrino's momenta)\n")
		f.write(" -1.0  = ptjmax    ! maximum pt for the jets\n")
		f.write(" -1.0  = ptbmax    ! maximum pt for the b\n")
		f.write(" -1.0  = ptamax    ! maximum pt for the photons\n")
		f.write(" -1.0  = ptlmax    ! maximum pt for the charged leptons\n")
		f.write(" -1.0  = missetmax ! maximum missing Et (sum of neutrino's momenta)\n")
		f.write(" {} = pt_min_pdg ! pt cut for other particles (use pdg code). Applied on particle and anti-particle\n")
		f.write(" {}	= pt_max_pdg ! pt cut for other particles (syntax e.g. {6: 100, 25: 50}) \n")
		f.write("#*********************************************************************\n")
		f.write("# Minimum and maximum E's (in the center of mass frame)              *\n")
		f.write("#*********************************************************************\n")
		f.write("  0.0  = ej     ! minimum E for the jets \n")
		f.write("  0.0  = eb     ! minimum E for the b \n")
		f.write("  0.0  = ea     ! minimum E for the photons \n")
		f.write("  0.0  = el     ! minimum E for the charged leptons \n")
		f.write("  -1.0   = ejmax ! maximum E for the jets\n")
		f.write(" -1.0   = ebmax ! maximum E for the b\n")
		f.write(" -1.0   = eamax ! maximum E for the photons\n")
		f.write(" -1.0   = elmax ! maximum E for the charged leptons\n")
		f.write(" {} = e_min_pdg ! E cut for other particles (use pdg code). Applied on particle and anti-particle\n")
		f.write(" {} = e_max_pdg ! E cut for other particles (syntax e.g. {6: 100, 25: 50}) \n")
		f.write("#*********************************************************************\n")
		f.write("# Maximum and minimum absolute rapidity (for max, -1 means no cut)   *\n")
		f.write("#*********************************************************************\n")
		f.write("  5.0 = etaj    ! max rap for the jets \n")
		f.write("  -1.0  = etab    ! max rap for the b\n")
		f.write(" 2.5  = etaa    ! max rap for the photons \n")
		f.write(" 2.5  = etal    ! max rap for the charged leptons \n")
		f.write(" 0.0  = etajmin ! min rap for the jets\n")
		f.write(" 0.0  = etabmin ! min rap for the b\n")
		f.write(" 0.0  = etaamin ! min rap for the photons\n")
		f.write(" 0.0  = etalmin ! main rap for the charged leptons\n")
		f.write(" {} = eta_min_pdg ! rap cut for other particles (use pdg code). Applied on particle and anti-particle\n")
		f.write(" {} = eta_max_pdg ! rap cut for other particles (syntax e.g. {6: 2.5, 23: 5})\n")
		f.write("#*********************************************************************\n")
		f.write("# Minimum and maximum DeltaR distance                                *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.4 = drjj    ! min distance between jets \n")
		f.write(" 0.0   = drbb    ! min distance between b's \n")
		f.write(" 0.4 = drll    ! min distance between leptons \n")
		f.write(" 0.4 = draa    ! min distance between gammas \n")
		f.write(" 0.0   = drbj    ! min distance between b and jet \n")
		f.write(" 0.4 = draj    ! min distance between gamma and jet \n")
		f.write(" 0.4 = drjl    ! min distance between jet and lepton \n")
		f.write(" 0.0   = drab    ! min distance between gamma and b \n")
		f.write(" 0.0   = drbl    ! min distance between b and lepton \n")
		f.write(" 0.4 = dral    ! min distance between gamma and lepton \n")
		f.write(" -1.0  = drjjmax ! max distance between jets\n")
		f.write(" -1.0  = drbbmax ! max distance between b's\n")
		f.write(" -1.0  = drllmax ! max distance between leptons\n")
		f.write(" -1.0  = draamax ! max distance between gammas\n")
		f.write(" -1.0  = drbjmax ! max distance between b and jet\n")
		f.write(" -1.0  = drajmax ! max distance between gamma and jet\n")
		f.write(" -1.0  = drjlmax ! max distance between jet and lepton\n")
		f.write(" -1.0  = drabmax ! max distance between gamma and b\n")
		f.write(" -1.0  = drblmax ! max distance between b and lepton\n")
		f.write(" -1.0  = dralmax ! maxdistance between gamma and lepton\n")
		f.write("#*********************************************************************\n")
		f.write("# Minimum and maximum invariant mass for pairs                       *\n")
		f.write("# WARNING: for four lepton final state mmll cut require to have      *\n")
		f.write("#          different lepton masses for each flavor!                  *           \n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0   = mmjj    ! min invariant mass of a jet pair \n")
		f.write(" 0.0   = mmbb    ! min invariant mass of a b pair \n")
		f.write(" 0.0   = mmaa    ! min invariant mass of gamma gamma pair\n")
		f.write(" 0.0   = mmll    ! min invariant mass of l+l- (same flavour) lepton pair\n")
		f.write(" -1.0  = mmjjmax ! max invariant mass of a jet pair\n")
		f.write(" -1.0  = mmbbmax ! max invariant mass of a b pair\n")
		f.write(" -1.0  = mmaamax ! max invariant mass of gamma gamma pair\n")
		f.write(" -1.0  = mmllmax ! max invariant mass of l+l- (same flavour) lepton pair\n")
		f.write(" {} = mxx_min_pdg ! min invariant mass of a pair of particles X/X~ (e.g. {6:250})\n")
		f.write(" {'default': False} = mxx_only_part_antipart ! if True the invariant mass is applied only \n")
		f.write("                       ! to pairs of particle/antiparticle and not to pairs of the same pdg codes.  \n")
		f.write("#*********************************************************************\n")
		f.write("# Minimum and maximum invariant mass for all letpons                 *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0   = mmnl    ! min invariant mass for all letpons (l+- and vl) \n")
		f.write(" -1.0  = mmnlmax ! max invariant mass for all letpons (l+- and vl) \n")
		f.write("#*********************************************************************\n")
		f.write("# Minimum and maximum pt for 4-momenta sum of leptons                *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0   = ptllmin  ! Minimum pt for 4-momenta sum of leptons(l and vl)\n")
		f.write(" -1.0  = ptllmax  ! Maximum pt for 4-momenta sum of leptons(l and vl)\n")
		f.write("#*********************************************************************\n")
		f.write("# Inclusive cuts                                                     *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0  = ptheavy   ! minimum pt for at least one heavy final state\n")
		f.write(" 0.0  = xptj ! minimum pt for at least one jet  \n")
		f.write(" 0.0  = xptb ! minimum pt for at least one b \n")
		f.write(" 0.0  = xpta ! minimum pt for at least one photon \n")
		f.write(" 0.0  = xptl ! minimum pt for at least one charged lepton \n")
		f.write("#*********************************************************************\n")
		f.write("# Control the pt's of the jets sorted by pt                          *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0   = ptj1min ! minimum pt for the leading jet in pt\n")
		f.write(" 0.0   = ptj2min ! minimum pt for the second jet in pt\n")
		f.write(" 0.0   = ptj3min ! minimum pt for the third jet in pt\n")
		f.write(" 0.0   = ptj4min ! minimum pt for the fourth jet in pt\n")
		f.write(" -1.0  = ptj1max ! maximum pt for the leading jet in pt \n")
		f.write(" -1.0  = ptj2max ! maximum pt for the second jet in pt\n")
		f.write(" -1.0  = ptj3max ! maximum pt for the third jet in pt\n")
		f.write(" -1.0  = ptj4max ! maximum pt for the fourth jet in pt\n")
		f.write(" 0   = cutuse  ! reject event if fails any (0) / all (1) jet pt cuts\n")
		f.write("#*********************************************************************\n")
		f.write("# Control the pt's of leptons sorted by pt                           *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0   = ptl1min ! minimum pt for the leading lepton in pt\n")
		f.write(" 0.0   = ptl2min ! minimum pt for the second lepton in pt\n")
		f.write(" 0.0   = ptl3min ! minimum pt for the third lepton in pt\n")
		f.write(" 0.0   = ptl4min ! minimum pt for the fourth lepton in pt\n")
		f.write(" -1.0  = ptl1max ! maximum pt for the leading lepton in pt \n")
		f.write(" -1.0  = ptl2max ! maximum pt for the second lepton in pt\n")
		f.write(" -1.0  = ptl3max ! maximum pt for the third lepton in pt\n")
		f.write(" -1.0  = ptl4max ! maximum pt for the fourth lepton in pt\n")
		f.write("#*********************************************************************\n")
		f.write("# Control the Ht(k)=Sum of k leading jets                            *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0   = htjmin ! minimum jet HT=Sum(jet pt)\n")
		f.write(" -1.0  = htjmax ! maximum jet HT=Sum(jet pt)\n")
		f.write(" 0.0   = ihtmin  !inclusive Ht for all partons (including b)\n")
		f.write(" -1.0  = ihtmax  !inclusive Ht for all partons (including b)\n")
		f.write(" 0.0   = ht2min ! minimum Ht for the two leading jets\n")
		f.write(" 0.0   = ht3min ! minimum Ht for the three leading jets\n")
		f.write(" 0.0   = ht4min ! minimum Ht for the four leading jets\n")
		f.write(" -1.0  = ht2max ! maximum Ht for the two leading jets\n")
		f.write(" -1.0  = ht3max ! maximum Ht for the three leading jets\n")
		f.write(" -1.0  = ht4max ! maximum Ht for the four leading jets\n")
		f.write("#***********************************************************************\n")
		f.write("# Photon-isolation cuts, according to hep-ph/9801442                   *\n")
		f.write("# When ptgmin=0, all the other parameters are ignored                  *\n")
		f.write("# When ptgmin>0, pta and draj are not going to be used                 *\n")
		f.write("#***********************************************************************\n")
		f.write(" 0.0 = ptgmin ! Min photon transverse momentum\n")
		f.write(" 0.4 = R0gamma ! Radius of isolation code\n")
		f.write(" 1.0 = xn ! n parameter of eq.(3.4) in hep-ph/9801442\n")
		f.write(" 1.0 = epsgamma ! epsilon_gamma parameter of eq.(3.4) in hep-ph/9801442\n")
		f.write(" True = isoEM ! isolate photons from EM energy (photons and leptons)\n")
		f.write("#*********************************************************************\n")
		f.write("# WBF cuts                                                           *\n")
		f.write("#*********************************************************************\n")
		f.write(" 0.0   = xetamin ! minimum rapidity for two jets in the WBF case  \n")
		f.write(" 0.0   = deltaeta ! minimum rapidity for two jets in the WBF case \n")
		f.write("#***********************************************************************\n")
		f.write("# Turn on either the ktdurham or ptlund cut to activate                *\n")
		f.write("# CKKW(L) merging with Pythia8 [arXiv:1410.3012, arXiv:1109.4829]      *\n")
		f.write("#***********************************************************************\n")
		f.write(" -1.0  =  ktdurham        \n")
		f.write(" 0.4   =  dparameter\n")
		f.write(" -1.0  =  ptlund\n")
		f.write(" 1, 2, 3, 4, 5, 6, 21  =  pdgs_for_merging_cut ! PDGs for two cuts above   \n")
		f.write("#*********************************************************************\n")
		f.write("# maximal pdg code for quark to be considered as a light jet         *\n")
		f.write("# (otherwise b cuts are applied)                                     *\n")
		f.write("#*********************************************************************\n")
		f.write(" 4 = maxjetflavor    ! Maximum jet pdg code\n")
		f.write("#*********************************************************************\n")
		f.write("#\n")
		f.write("#*********************************************************************\n")
		f.write("# Store info for systematics studies                                 *\n")
		f.write("# WARNING: Do not use for interference type of computation           *\n")
		f.write("#*********************************************************************\n")
		f.write("   False  = use_syst      ! Enable systematics studies\n")
		f.write("#\n")
		f.write("systematics = systematics_program ! none, systematics [python], SysCalc [depreceted, C++]\n")
		f.write("['--mur=0.5,1,2', '--muf=0.5,1,2', '--pdf=errorset'] = systematics_arguments ! see: https://cp3.irmp.ucl.ac.be/projects/madgraph/wiki/Systematics#Systematicspythonmodule\n")
		f.write("# Syscalc is deprecated but to see the associate options type'update syscalc'\n")
	
	return outfile